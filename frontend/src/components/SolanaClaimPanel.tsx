'use client'
import { useEffect, useMemo, useState } from 'react'
import { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js'
import { useConnection, useWallet } from '@solana/wallet-adapter-react'
import { deriveRoundPda, fetchRoundRaw, type RoundState } from '../lib/round'
import { derivePlayerRoundPda, fetchPlayerRoundRaw, type PlayerRoundState } from '../lib/player-round'
import WinLoseAnimation from './WinLoseAnimation'

const PROGRAM_ID = new PublicKey(import.meta.env.VITE_PROGRAM_ID as string)
const ROUND_ID = 1n // TODO: make dynamic

type ToastMsg = { kind: 'ok' | 'err' | 'info'; text: string }

export default function SolanaClaimPanel() {
  const { connection } = useConnection()
  const { publicKey, sendTransaction } = useWallet()

  const [round, setRound] = useState<RoundState | null>(null)
  const [playerRound, setPlayerRound] = useState<PlayerRoundState | null>(null)
  const [busy, setBusy] = useState(false)
  const [msg, setMsg] = useState<ToastMsg | null>(null)
  const [pollTrigger, setPollTrigger] = useState(0)

  const cluster = (import.meta as any).env?.VITE_SOLANA_CLUSTER || 'devnet'

  // Load round state
  useEffect(() => {
    ;(async () => {
      const rPda = deriveRoundPda(PROGRAM_ID, ROUND_ID)
      const st = await fetchRoundRaw(connection, rPda)
      setRound(st)
    })()
  }, [connection, pollTrigger])

  // Load player round state
  useEffect(() => {
    if (!publicKey) return
    ;(async () => {
      const rPda = deriveRoundPda(PROGRAM_ID, ROUND_ID)
      const prPda = derivePlayerRoundPda(PROGRAM_ID, rPda, publicKey)
      const prState = await fetchPlayerRoundRaw(connection, prPda)
      setPlayerRound(prState)
    })()
  }, [connection, publicKey, pollTrigger])

  // Poll for updates every 5s
  useEffect(() => {
    const id = setInterval(() => {
      setPollTrigger((n) => n + 1)
    }, 5000)
    return () => clearInterval(id)
  }, [])

  const isWinner = useMemo(() => {
    if (!round || !playerRound) return false
    if (!round.settled || round.winnerSide == null) return false
    if (!playerRound.revealed) return false
    // tribe: 0=Milk, 1=Cacao; winnerSide: 0=Milk, 1=Cacao
    return playerRound.tribe === round.winnerSide
  }, [round, playerRound])

  const canClaim = useMemo(() => {
    return (
      !!round &&
      !!playerRound &&
      round.settled &&
      isWinner &&
      !playerRound.claimed &&
      !!publicKey
    )
  }, [round, playerRound, isWinner, publicKey])

  async function onClaim() {
    try {
      setMsg(null)
      if (!publicKey) throw new Error('Vui l√≤ng connect v√≠')
      if (!round) throw new Error('Round ch∆∞a t·∫£i xong')
      if (!playerRound) throw new Error('B·∫°n ch∆∞a tham gia round')
      if (!round.settled) throw new Error('Round ch∆∞a ch·ªët k·∫øt qu·∫£')
      if (!isWinner) throw new Error('Ch·ªâ phe th·∫Øng m·ªõi claim ƒë∆∞·ª£c')
      if (playerRound.claimed) throw new Error('B·∫°n ƒë√£ claim r·ªìi')

      setBusy(true)

      const rPda = deriveRoundPda(PROGRAM_ID, ROUND_ID)
      const prPda = derivePlayerRoundPda(PROGRAM_ID, rPda, publicKey)

      // Instruction data: opcode for claim_treat (e.g., 0x03)
      // Adjust according to your program's IDL
      const data = Buffer.from([3]) // claim_treat opcode

      const keys = [
        { pubkey: publicKey, isSigner: true, isWritable: true }, // player
        { pubkey: rPda, isSigner: false, isWritable: true }, // round
        { pubkey: prPda, isSigner: false, isWritable: true }, // player_round
        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      ]

      const ix = new TransactionInstruction({ programId: PROGRAM_ID, keys, data })
      const tx = new Transaction().add(ix)
      const sig = await sendTransaction(tx, connection, { skipPreflight: false })

      setMsg({
        kind: 'ok',
        text: `Claim th√†nh c√¥ng! Tx: https://explorer.solana.com/tx/${sig}?cluster=${cluster}`,
      })

      // Trigger re-fetch
      setTimeout(() => setPollTrigger((n) => n + 1), 2000)
    } catch (e: any) {
      const txt = normalizeClaimError(e?.message || String(e))
      setMsg({ kind: 'err', text: txt })
    } finally {
      setBusy(false)
    }
  }

  const statusText = useMemo(() => {
    if (!round) return 'ƒêang t·∫£i round...'
    if (!round.settled) return 'Round ch∆∞a ch·ªët k·∫øt qu·∫£'
    if (!playerRound) return 'B·∫°n kh√¥ng tham gia round n√†y'
    if (!playerRound.revealed) return 'B·∫°n ch∆∞a reveal'
    if (round.winnerSide == null) return 'Ch∆∞a x√°c ƒë·ªãnh phe th·∫Øng (ho√†)'
    return isWinner ? 'B·∫°n thu·ªôc phe TH·∫ÆNG üéâ' : 'B·∫°n thu·ªôc phe THUA'
  }, [round, playerRound, isWinner])

  const winnerSideText = useMemo(() => {
    if (!round || round.winnerSide == null) return '‚Äî'
    return round.winnerSide === 0 ? 'Milk' : 'Cacao'
  }, [round])

  const playerSideText = useMemo(() => {
    if (!playerRound) return '‚Äî'
    if (playerRound.tribe === 0) return 'Milk'
    if (playerRound.tribe === 1) return 'Cacao'
    return 'None'
  }, [playerRound])

  return (
    <div
      id="solana-claim-panel"
      className="w-full space-y-5 rounded-2xl border border-border bg-card p-6 shadow-soft"
    >
      <h2 className="text-2xl font-semibold">K·∫øt qu·∫£ Round #{ROUND_ID.toString()}</h2>

      <div className="space-y-1 text-base">
        <div>
          Tr·∫°ng th√°i: <span className="font-medium">{statusText}</span>
        </div>
        {round?.settled && round.winnerSide != null && (
          <div>
            Minority (winner): <span className="font-mono">{winnerSideText}</span>
          </div>
        )}
        {playerRound && (
          <>
            <div>
              B·∫°n ch·ªçn: <span className="font-mono">{playerSideText}</span>
            </div>
            <div>
              Revealed: <span className="font-mono">{playerRound.revealed ? '‚úÖ' : '‚ùå'}</span>
            </div>
            {playerRound.claimed && <div className="text-green-700">ƒê√£ nh·∫≠n th∆∞·ªüng ‚úÖ</div>}
          </>
        )}
      </div>

      {round?.settled && round.winnerSide != null && playerRound?.revealed && (
        <div className="mt-2"><WinLoseAnimation result={isWinner ? 'win' : 'lose'} /></div>
      )}

      <div className="flex items-center gap-3">
        <button
          onClick={onClaim}
          disabled={!canClaim || busy}
          className="px-6 py-3 rounded-2xl text-base bg-emerald-600 text-white disabled:opacity-50 hover:bg-emerald-700 transition"
          title="Ch·ªâ phe th·∫Øng m·ªõi claim. ƒê√£ claim s·∫Ω b·ªã ch·∫∑n l·∫ßn 2."
        >
          {busy ? 'Claiming‚Ä¶' : 'Claim ph·∫ßn th∆∞·ªüng'}
        </button>
      </div>

      {/* Toast messages */}
      {!round?.settled && <Toast kind="info" text="‚è≥ Ch·ªù round ƒë∆∞·ª£c ch·ªët (RoundMeowed)..." />}
      {round?.settled && playerRound && !playerRound.revealed && (
        <Toast kind="info" text="‚ÑπÔ∏è B·∫°n c·∫ßn reveal tr∆∞·ªõc khi claim." />
      )}
      {round?.settled && isWinner && playerRound?.claimed && (
        <Toast kind="ok" text="üéâ B·∫°n ƒë√£ claim r·ªìi." />
      )}
      {round?.settled && playerRound?.revealed && !isWinner && (
        <Toast kind="info" text="‚ÑπÔ∏è Ch·ªâ phe th·∫Øng m·ªõi claim ƒë∆∞·ª£c." />
      )}
      {msg && <Toast kind={msg.kind} text={msg.text} />}

      <div className="text-xs text-gray-500 mt-2">
        Wallet: {publicKey?.toBase58() || '‚Äî'}
      </div>
    </div>
  )
}

function Toast({ kind, text }: { kind: 'ok' | 'err' | 'info'; text: string }) {
  const color =
    kind === 'ok' ? 'text-green-600' : kind === 'err' ? 'text-red-600' : 'text-gray-700'
  return <div className={`${color} text-sm`}>{text}</div>
}

function normalizeClaimError(raw: string): string {
  if (/already claimed|double.?claim/i.test(raw)) return 'B·∫°n ƒë√£ claim r·ªìi (double-claim blocked)'
  if (/not.*winner|wrong.*side|not.*eligible/i.test(raw))
    return 'Ch·ªâ phe th·∫Øng m·ªõi claim ƒë∆∞·ª£c'
  if (/not.*settled|not.*finalized/i.test(raw)) return 'Round ch∆∞a ch·ªët k·∫øt qu·∫£'
  if (/0x1/.test(raw)) return 'L·ªói ch∆∞∆°ng tr√¨nh (0x1): ki·ªÉm tra state/account'
  return raw
}
